apiVersion: karpenter.sh/v1alpha5
kind: Provisioner
metadata:
  name: default
spec:
  requirements:
    - key: "kubernetes.io/arch"
      operator: In
      values: ["arm64"]  # Prioritize ARM64 (Graviton)
    - key: "kubernetes.io/os"
      operator: In
      values: ["linux"]
    - key: "karpenter.sh/capacity-type"
      operator: In
      values: ["spot"]  # Prioritize Spot instances
    - key: "node.kubernetes.io/instance-type"
      operator: In
      values: [
        # Graviton instances (ARM64)
        "t4g.medium", "t4g.large", "t4g.xlarge",
        "c6g.large", "c6g.xlarge", "c6g.2xlarge",
        "m6g.large", "m6g.xlarge", "m6g.2xlarge",
        "r6g.large", "r6g.xlarge", "r6g.2xlarge"
      ]
  limits:
    resources:
      cpu: 1000
      memory: 1000Gi
  providerRef:
    name: default
  ttlSecondsAfterEmpty: 30
  ttlSecondsUntilExpired: 604800  # 7 days
  weight: 20  # Higher priority for this provisioner

---
# Fallback provisioner for x86 instances if ARM capacity is unavailable
apiVersion: karpenter.sh/v1alpha5
kind: Provisioner
metadata:
  name: fallback
spec:
  requirements:
    - key: "kubernetes.io/arch"
      operator: In
      values: ["amd64"]
    - key: "kubernetes.io/os"
      operator: In
      values: ["linux"]
    - key: "karpenter.sh/capacity-type"
      operator: In
      values: ["spot", "on-demand"]
    - key: "node.kubernetes.io/instance-type"
      operator: In
      values: [
        "t3.medium", "t3.large", "t3.xlarge",
        "c5.large", "c5.xlarge", "c5.2xlarge",
        "m5.large", "m5.xlarge", "m5.2xlarge"
      ]
  limits:
    resources:
      cpu: 1000
      memory: 1000Gi
  providerRef:
    name: default
  ttlSecondsAfterEmpty: 30
  ttlSecondsUntilExpired: 604800
  weight: 10  # Lower priority for this provisioner

---
apiVersion: karpenter.k8s.aws/v1alpha1
kind: AWSNodeTemplate
metadata:
  name: default
spec:
  subnetSelector:
    karpenter.sh/discovery: ${cluster_name}
  securityGroupSelector:
    karpenter.sh/discovery: ${cluster_name}
  tags:
    karpenter.sh/discovery: ${cluster_name}
  blockDeviceMappings:
    - deviceName: /dev/xvda
      ebs:
        volumeSize: 50Gi
        volumeType: gp3
        deleteOnTermination: true
  instanceProfile: ${instance_profile_name}